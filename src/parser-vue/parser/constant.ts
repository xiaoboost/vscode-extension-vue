export const errorText = {
    tagUnClosed: 'Tag is not closed.',
    extraCloseTag: 'Extra closing tags.',
    viewEleCannotContainText: 'View Element cann\'t contain Text.',
    viewEleCannotContainMustache: 'View Element cann\'t contain Mustache.',
    unusedAttribute: (name: string, tag: string) => `Can't use Attribute '${name}' in Tag '${tag}'.`,
    unexpectedCharacter: (char: string) => `Unexpected character "${char}".`,
    commandNotSupport: (name: string) => `Directive 'tt:${name}' is not support.`,
    templateAttrAllow: 'Template only allow (\'is\' and \'data\') or (\'name\') attribute.',
    attributeDuplicate: 'Attributes duplicate.',
    templateWithNameMustInTop: 'The \'temaplte\' tag  with \'name\' attribute must be at Top level.',
    importOnlyAllowSrc: 'Tag \'import\' and \'include\' only allow \'src\' attribute.',
    importMustHasSrc: 'Tag \'import\' and \'include\' must have \'src\' attribute.',
    importIsDisableChild: 'The \'temaplte\' tag  with \'is\' attribute cann\'t contain any child.',
    ifChainError: `'tt:elif' or 'tt:else' directives require being preceded by the element which has a 'tt:if' or 'tt:elif' directive.`,
    templateNameDoNotEmpty: `'name' attribute in 'template' tag can't be empty.`,
    attrMustHasValue: (name: string) => `Attribute '${name}' must have value.`,
    attrMustStaticValue: (name: string) => `Attribute '${name}' must use a static value.`,
    templateNotDefined: (name: string) => `Undefined template name '${name}'.`,
    directivePrefixWrong: `Please use 'tt:' for directive prefix.`,
};
